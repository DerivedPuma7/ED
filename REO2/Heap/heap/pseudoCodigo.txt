criarHeap(umaCapacidade)
    this->capacidade = umaCapacidade;
    this->dados = alocaVetorDeDados(this->capacidade);
    this->tamanho = 0;

destruirHeap()
    desalocarVetorDeDados(this->dados);

corrigeDescendo(i) //posição do elemento que está sendo avaliado
    filhoEsquerdo = encontraEsquerdo(i);
    filhoDireito = encontraDireito(i);
    maior = i; // posição maior valor;

    se( (filhoEsquerdo <= FINAL) AND (dados[filhoEsquerdo] > dados[maior]) )
        maior = filhoEsquerdo;
    se( (filhoDireito <= FINAL) AND (dados[filhoDireito] > dados[maior]) )
        maior = filhoDireito;
    se(maior != i)
        troca(dados[i], dados[maior]);
        corrigeDescendo(maior); //recursivo

constroiHeap(vetor, tamanho) //heapfy
    dados = copiaDados(vetor);
    //INICIO informa a posição inicial utilizada no vetor para todo i de METADE  até INICIO
    corrigeDescendo(i);

retiraRaiz()
    se(this->tamanho < 1)
        geraErro();
    
    aux = dados[INICIO];
    troca(dados[INICIO], DADOS[FINAL]);

    tamanho--;

    corrigeDescendo(INICIO);
    efetuaAlgumaAcao(aux);

corrigeSubindo(i)
    pai = encontraPai(i);
    se( (pai >= INICIO) AND (dados[i] > dados[pai]) )
        troca(dados[i],  dados[pai]);
        corrigeSubindo(pai);

insere(valor)
    se(this->tamanho == this->capacidade)
        geraErro();
    
    dados[FINAL + 1] = valor;
    corrigeSubindo(FINAL + 1);
    
    this->tamanho++;